name: Build for Multiple Platforms

on:
  push:
    branches:
      - main # 当推送到 main 分支时触发
    tags:
      - 'v*.*.*' # 当推送 v 开头的 tag 时触发 (例如 v1.0.0)
  workflow_dispatch: # 允许手动触发

jobs:
  # ----------------------------------------------------
  # Job 1: 在 Linux 上构建
  # ----------------------------------------------------
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器

    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4

      - name: 2. Setup your build environment
        # 在这里放置您的环境设置步骤
        # 例如: actions/setup-node, subosito/flutter-action, actions/setup-java 等
        run: echo "Setting up Linux environment..."

      - name: 3. Build the application
        # 这是您的实际构建命令
        # 我们用创建示例文件来模拟构建产物
        run: |
          mkdir -p build
          echo "This is the Linux executable" > build/my-app-linux

      - name: 4. Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build # 下载时显示的 Artifact 名称
          path: build/my-app-linux # 要上传的文件或目录路径

  # ----------------------------------------------------
  # Job 2: 在 Windows 上构建
  # ----------------------------------------------------
  build-windows:
    name: Build on Windows
    runs-on: windows-latest # 使用最新的 Windows 运行器

    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4

      - name: 2. Setup your build environment
        run: echo "Setting up Windows environment..."

      - name: 3. Build the application
        # 在 Windows 上，您可能会生成一个 .exe 或 .msi 文件
        run: |
          mkdir build
          echo "This is the Windows executable" > build/my-app.exe

      - name: 4. Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build # 下载时显示的 Artifact 名称
          path: build/my-app.exe # 上传 .exe 文件

  # ----------------------------------------------------
  # Job 3: 在 macOS 上构建
  # ----------------------------------------------------
  build-macos:
    name: Build on macOS
    runs-on: macos-latest # 使用最新的 macOS 运行器

    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4

      - name: 2. Setup your build environment
        run: echo "Setting up macOS environment..."

      - name: 3. Build the application
        # 在 macOS 上，您可能会生成一个 .app 或 .dmg 文件
        run: |
          mkdir -p build
          echo "This is the macOS disk image" > build/my-app.dmg

      - name: 4. Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build # 下载时显示的 Artifact 名称
          path: build/my-app.dmg # 上传 .dmg 文件

  # ----------------------------------------------------
  # (可选) Job 4: 创建 GitHub Release 并附加所有产物
  # ----------------------------------------------------
  create-release:
    name: Create GitHub Release
    # 仅当推送的是 tag 时才运行此作业
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    # 此作业必须等待所有构建作业成功完成
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      # 需要写入权限来创建 Release
      contents: write

    steps:
      - name: 1. Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # 将所有 Artifacts 下载到名为 "dist" 的目录中
          path: dist

      - name: 2. Display structure of downloaded files
        run: ls -R dist

      - name: 3. Create Release and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          # 从下载的目录中匹配所有文件并附加到 Release
          files: |
            dist/linux-build/*
            dist/windows-build/*
            dist/macos-build/*
